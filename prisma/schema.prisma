// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified Boolean?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[] 
  }

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  type String // new
  description String
  country String @default("om") //new
  state String? // new
  address String // new
  locationValue String?
  propertyId String // new
  size String // new
  roomCount Int
  bathroomCount Int
  price Int
  rentCycle String // new
  thumbnailSrc String
  galleryImages String[]
  createdAt DateTime @default(now())
  category String
  guestCount Int
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  propertyAmenities PropertyAmenity[] // Added this field for the relation
}

model AmenityCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  amenities   Amenity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Amenity {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  icon        String?          // Optional field for amenity icon
  categoryId  String @db.ObjectId
  category    AmenityCategory   @relation(fields: [categoryId], references: [id])
  properties  PropertyAmenity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyAmenity {
  id String     @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String @db.ObjectId
  amenityId  String @db.ObjectId

  createdAt DateTime @default(now())

  property   Listing @relation(fields: [propertyId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

}